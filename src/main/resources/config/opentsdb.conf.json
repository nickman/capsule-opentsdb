[
  {
    "category" : "NETWORK",
    "key" : "tsd.network.port",
    "value" : "${tsd.network.port:4242}",
    "description" : "The TCP port TSD should use for communications"
  },
  {
    "category" : "NETWORK",
    "key" : "tsd.network.bind",
    "value" : "${tsd.network.bind:0.0.0.0}",
    "description" : "The IPv4 network address to bind to, defaults to all addresses"
  },
  {
    "category" : "NETWORK",
    "key" : "tsd.network.tcp_no_delay",
    "value" : "${tsd.network.tcpnodelay:true}",
    "description" : "Enables Nagel's algorithm to reduce the number of packets sent over the network, default is True"
  },
  {
    "category" : "NETWORK",
    "key" : "tsd.network.keep_alive",
    "value" : "${tsd.network.keepalive:true}",
    "description" : "Determines whether or not to send keepalive packets to peers, default is True"
  },
  {
    "category" : "NETWORK",
    "key" : "tsd.network.reuse_address",
    "value" : "${tsd.network.reuseaddress:true}",
    "description" : "Determines if the same socket should be used for new connections, default is True"
  },
  {
    "category" : "NETWORK",
    "key" : "tsd.network.worker_threads",
    "value" : "${tsd.network.worker_threads:js{new java.lang.Double(java.lang.management.ManagementFactory.getOperatingSystemMXBean().getAvailableProcessors() * 2).intValue()}}",
    "description" : "Number of worker threads dedicated to Netty, defaults to # of CPUs * 2"
  },
  {
    "category" : "NETWORK",
    "key" : "tsd.network.async_io",
    "value" : "${tsd.network.async_io:true}",
    "description" : "Whether or not to use NIO or tradditional blocking IO, defaults to True"
  },
  {
    "category" : "NETWORK",
    "key" : "tsd.network.backlog",
    "value" : "${tsd.network.backlog:see description}",
    "description" : "The connection queue depth for completed or incomplete connection requests depending on OS. The default may be limited by the 'somaxconn' kernel setting or set by Netty to 3072."
  },
  {
    "category" : "HTTP",
    "key" : "tsd.http.staticroot",
    "value" : "${tsd.http.staticroot:${capsule.cache.dir}/uiroot}",
    "description" : "The location of static files for the HTTP GUI interface."
  },
  {
    "category" : "HTTP",
    "key" : "tsd.http.cachedir",
    "value" : "${tsd.http.cachedir:${capsule.cache.dir}/cache}",
    "description" : "Where TSD should write it's cache files to"
  },
  {
    "category" : "HTTP",
    "key" : "tsd.http.query.allow_delete",
    "value" : "${tsd.http.query.allow_delete:false}",
    "description" : "Whether or not to allow deleting data points from storage during query time."
  },
  {
    "category" : "HTTP",
    "key" : "tsd.http.request.cors_domains",
    "value" : "${tsd.http.request.cors_domains:*}",
    "description" : "A comma separated list of domain names to allow access to OpenTSDB when the header is specified by the client. If empty, CORS requests are passed through without validation. The list may not contain the public wildcard and specific domains at the same time."
  },
  {
    "category" : "HTTP",
    "key" : "tsd.http.request.cors_headers",
    "value" : "${tsd.http.request.cors_headers:Authorization, Content-Type, Accept, Origin, User-Agent, DNT, Cache-Control, X-Mx-ReqToken, Keep-Alive, X-Requested-With, If-Modified-Since}",
    "description" : "A comma separated list of headers sent to clients when executing a CORs request. The literal value of this option will be passed to clients."
  },
  {
    "category" : "HTTP",
    "key" : "tsd.http.request.enable_chunked",
    "value" : "${tsd.http.request.enable_chunked:false}",
    "description" : "Whether or not to enable incoming chunk support for the HTTP RPC"
  },
  {
    "category" : "HTTP",
    "key" : "tsd.http.request.max_chunk",
    "value" : "${tsd.http.request.max_chunk:4096}",
    "description" : "The maximum request body size to support for incoming HTTP requests when chunking is enabled."
  },
  {
    "category" : "HTTP",
    "key" : "tsd.http.rpc.plugins",
    "value" : "${tsd.http.rpc.plugins:}",
    "description" : "A comma delimited list of RPC plugins to load when starting a TSD. Must contain the entire class name."
  },
  {
    "category" : "HTTP",
    "key" : "tsd.http.show_stack_trace",
    "value" : "${tsd.http.show_stack_trace:false}",
    "description" : "Whether or not to return the stack trace with an API query response when an exception occurs."
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.auto_create_metrics",
    "value" : "${tsd.core.auto_create_metrics:true}",
    "description" : "Whether or not to automatically create UIDs for new metric types, default is True"
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.auto_create_tagks",
    "value" : "${tsd.core.auto_create_tagks:true}",
    "description" : "Whether or not a data point with a new tag name will assign a UID to the tagk. When false, a data point with a tag name that is not in the database will be rejected and an exception will be thrown."
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.auto_create_tagvs",
    "value" : "${tsd.core.auto_create_tagvs:true}",
    "description" : "Whether or not a data point with a new tag value will assign a UID to the tagv. When false, a data point with a tag value that is not in the database will be rejected and an exception will be thrown."
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.meta.enable_realtime_ts",
    "value" : "${tsd.core.meta.enable_realtime_ts:false}",
    "description" : "Whether or not to enable real-time TSMeta object creation. See"
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.meta.enable_realtime_uid",
    "value" : "${tsd.core.meta.enable_realtime_uid:false}",
    "description" : "Whether or not to enable real-time UIDMeta object creation. See"
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.meta.enable_tsuid_incrementing",
    "value" : "${tsd.core.meta.enable_tsuid_incrementing:false}",
    "description" : "Whether or not to enable tracking of TSUIDs by incrementing a counter every time a data point is recorded. See (Overrides \"tsd.core.meta.enable_tsuid_tracking\")"
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.meta.enable_tsuid_tracking",
    "value" : "${tsd.core.meta.enable_tsuid_tracking:false}",
    "description" : "Whether or not to enable tracking of TSUIDs by storing a with the current timestamp every time a data point is recorded. See"
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.plugin_path",
    "value" : "${tsd.core.plugin_path:e{CAPSULE_CACHE_DIR}/plugins}",
    "description" : "A path to search for plugins when the TSD starts. If the path is invalid, the TSD will fail to start. Plugins can still be enabled if they are in the class path."
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.preload_uid_cache",
    "value" : "${tsd.core.preload_uid_cache:false}",
    "description" : "Enables pre-population of the UID caches when starting a TSD."
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.preload_uid_cache.max_entries",
    "value" : "${tsd.core.preload_uid_cache.max_entries:300000}",
    "description" : "The number of rows to scan for UID pre-loading."
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.storage_exception_handler.enable",
    "value" : "${tsd.core.storage_exception_handler.enable:false}",
    "description" : "Whether or not to enable the configured storage exception handler plugin."
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.storage_exception_handler.plugin",
    "value" : "${tsd.core.storage_exception_handler.plugin:}",
    "description" : "The full class name of the storage exception handler plugin you wish to use."
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.timezone",
    "value" : "${tsd.core.timezone:${user.timezone}}",
    "description" : "A localized timezone identification string used to override the local system timezone used when converting absolute times to UTC when executing a query. This does not affect incoming data timestamps. E.g. America/Los_Angeles"
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.tree.enable_processing",
    "value" : "${tsd.core.tree.enable_processing:false}",
    "description" : "Whether or not to enable processing new/edited TSMeta through tree rule sets"
  },
  {
    "category" : "CORE",
    "key" : "tsd.core.uid.random_metrics",
    "value" : "${tsd.core.uid.random_metrics:false}",
    "description" : "Whether or not to randomly assign UIDs to new metrics as they are created"
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.enable_compaction",
    "value" : "${tsd.storage.enable_compaction:true}",
    "description" : "Whether or not to enable data compaction in HBase, default is True"
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.flush_interval",
    "value" : "${tsd.storage.flush_interval:1000}",
    "description" : "How often, in milliseconds, to flush the data point queue to storage. Default is 1000"
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.hbase.data_table",
    "value" : "${tsd.storage.hbase.data_table:tsdb}",
    "description" : "Name of the HBase table where data points are stored, default is \"tsdb\""
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.hbase.uid_table",
    "value" : "${tsd.storage.hbase.uid_table:tsdb-uid}",
    "description" : "Name of the HBase table where UID information is stored, default is \"tsdb-uid\""
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.hbase.zk_basedir",
    "value" : "${tsd.storage.hbase.zk_basedir:/hbase}",
    "description" : "Path under which the znode for the -ROOT- region is located, default is \"/hbase\""
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.hbase.zk_quorum",
    "value" : "${tsd.storage.hbase.zk_quorum:localhost}",
    "description" : "A comma separated list of Zookeeper hosts to connect to, with or without port specifiers, default is \"localhost\""
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.enable_appends",
    "value" : "${tsd.storage.enable_appends:false}",
    "description" : "Whether or not to append data to columns when writing data points instead of creating new columns for each value. Avoids the need for compactions after each hour but can use more resources on HBase."
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.fix_duplicates",
    "value" : "${tsd.storage.fix_duplicates:false}",
    "description" : "Whether or not to accept the last written value when parsing data points with duplicate timestamps. When enabled in conjunction with compactions, a compacted column will be written with the latest data points."
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.hbase.meta_table",
    "value" : "${tsd.storage.hbase.meta_table:tsdb-meta}",
    "description" : "Name of the HBase table where meta data are stored"
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.hbase.prefetch_meta",
    "value" : "${tsd.storage.hbase.prefetch_meta:false}",
    "description" : "Whether or not to prefetch the regions for the TSDB tables before starting the network interface. This can improve performance."
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.hbase.tree_table",
    "value" : "${tsd.storage.hbase.tree_table:tsdb-tree}",
    "description" : "Name of the HBase table where tree data are stored"
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.repair_appends",
    "value" : "${tsd.storage.repair_appends:false}",
    "description" : "Whether or not to re-write appended data point columns at query time when the columns contain duplicate or out of order data."
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.max_tags",
    "value" : "${tsd.storage.max_tags:8}",
    "description" : "The maximum number of tags allowed per data point. Please be aware of the performance tradeoffs of overusing tags"
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.salt.buckets",
    "value" : "${tsd.storage.salt.buckets:20}",
    "description" : "The number of salt buckets used to distribute load across regions. Changing this value after writing data may cause TSUID based queries to fail."
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.salt.width",
    "value" : "${tsd.storage.salt.width:0}",
    "description" : "The width, in bytes, of the salt prefix used to indicate which bucket a time series belongs in. A value of 0 means salting is disabled. Do not change after writing data to HBase or you will corrupt your tables and not be able to query any more."
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.uid.width.metric",
    "value" : "${tsd.storage.uid.width.metric:3}",
    "description" : "The width, in bytes, of metric UIDs. Do not change after writing data to HBase or you will corrupt your tables and not be able to query any more."
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.uid.width.tagk",
    "value" : "${tsd.storage.uid.width.tagk:3}",
    "description" : "The width, in bytes, of tag name UIDs. Do not change after writing data to HBase or you will corrupt your tables and not be able to query any more."
  },
  {
    "category" : "STORAGE",
    "key" : "tsd.storage.uid.width.tagv",
    "value" : "${tsd.storage.uid.width.tagv:3}",
    "description" : "The width, in bytes, of tag value UIDs. Do not change after writing data to HBase or you will corrupt your tables and not be able to query any more."
  },
  {
    "category" : "COMPACTIONS",
    "key" : "tsd.storage.compaction.flush_interval",
    "value" : "${tsd.storage.compaction.flush_interval:10}",
    "description" : "Frequency at which compaction thread wakes up to flush stuff in seconds, default 10"
  },
  {
    "category" : "COMPACTIONS",
    "key" : "tsd.storage.compaction.min_flush_threshold",
    "value" : "${tsd.storage.compaction.min_flush_threshold:100}",
    "description" : "Minimum rows attempted to compact at once, default 100"
  },
  {
    "category" : "COMPACTIONS",
    "key" : "tsd.storage.compaction.max_concurrent_flushes",
    "value" : "${tsd.storage.compaction.max_concurrent_flushes:10000}",
    "description" : "Maximum number of rows, compacted concirrently, default 10000"
  },
  {
    "category" : "COMPACTIONS",
    "key" : "tsd.storage.compaction.flush_speed",
    "value" : "${tsd.storage.compaction.flush_speed:2}",
    "description" : "Compaction flush speed multiplier, default 2"
  },
  {
    "category" : "MISC",
    "key" : "tsd.mode",
    "value" : "${tsd.mode:rw}",
    "description" : "Whether or not the TSD will allow writing data points. Must be either to allow writing data or to block data point writes. Note that meta data such as UIDs can still be written/modified."
  },
  {
    "category" : "MISC",
    "key" : "tsd.no_diediedie",
    "value" : "${tsd.no_diediedie:false}",
    "description" : "Enable or disable the HTML and ASCII commands to shutdown a TSD."
  },
  {
    "category" : "MISC",
    "key" : "tsd.stats.canonical",
    "value" : "${tsd.stats.canonical:false}",
    "description" : "Whether or not the FQDN should be returned with statistics requests. The default stats are returned with which is not guaranteed to perform a lookup and return the FQDN. Setting this to true will perform a name lookup and return the FQDN if found, otherwise it may return the IP. The stats output should be"
  },
  {
    "category" : "QUERY",
    "key" : "tsd.query.allow_simultaneous_duplicates",
    "value" : "${tsd.query.allow_simultaneous_duplicates:false}",
    "description" : "Whether or not to allow simultaneous duplicate queries from the same host. If disabled, a second query that comes in matching one already running will receive an exception."
  },
  {
    "category" : "QUERY",
    "key" : "tsd.query.filter.expansion_limit",
    "value" : "${tsd.query.filter.expansion_limit:4096}",
    "description" : "The maximum number of tag values to include in the regular expression sent to storage during scanning for data. A larger value means more computation on the HBase region servers."
  },
  {
    "category" : "QUERY",
    "key" : "tsd.query.skip_unresolved_tagvs",
    "value" : "${tsd.query.skip_unresolved_tagvs:false}",
    "description" : "Whether or not to continue querying when the query includes a tag value that hasn't been assigned a UID yet and may not exist."
  },
  {
    "category" : "QUERY",
    "key" : "tsd.query.timeout",
    "value" : "${tsd.query.timeout:0}",
    "description" : "How long, in milliseconds, before canceling a running query. A value of 0 means queries will not timeout."
  },
  {
    "category" : "PLUGINS",
    "key" : "tsd.rpc.plugins",
    "value" : "${tsd.rpc.plugins:}",
    "description" : "A comma delimited list of RPC plugins to load when starting a TSD. Must contain the entire class name."
  },
  {
    "category" : "PLUGINS",
    "key" : "tsd.rtpublisher.enable",
    "value" : "${tsd.rtpublisher.enable:false}",
    "description" : "Whether or not to enable a real time publishing plugin. If true, you must supply a valid class name"
  },
  {
    "category" : "PLUGINS",
    "key" : "tsd.rtpublisher.plugin",
    "value" : "${tsd.rtpublisher.plugin:}",
    "description" : "The class name of a real time publishing plugin to instantiate. If is set to false, this value is ignored. E.g. net.opentsdb.tsd.RabbitMQPublisher"
  },
  {
    "category" : "PLUGINS",
    "key" : "tsd.search.enable",
    "value" : "${tsd.search.enable:false}",
    "description" : "Whether or not to enable search functionality. If true, you must supply a valid class name"
  },
  {
    "category" : "PLUGINS",
    "key" : "tsd.search.plugin",
    "value" : "${tsd.search.plugin:}",
    "description" : "The class name of a search plugin to instantiate. If is set to false, this value is ignored. E.g. net.opentsdb.search.ElasticSearch"
  }
]
